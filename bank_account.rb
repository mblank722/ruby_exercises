# Assignment: Bank Account
# MandatoryDeadline: Tuesday of Week 1Difficulty Level: IntermediateEstimated Time: 2-4 hrs
# We are going to create a Bank Account class. This class will recreate some of the common Account transactions that normally occur for a bank account such as displaying your account number, checking and savings amount, total amount. Of course, there are also methods to invoke such as depositing a check, checking your balance, withdrawing money

# bank_account.rb

# BankAccount should have a method that returns a user's account number, account number should be generated by a private method, account number should be random

# BankAccount should have a method that returns the user's checking account balance

# BankAccount should have a method that returns the user's saving account balance

# BankAccount should allow a user to deposit money into either their checking or saving account

# BankAccount should allow a user to withdraw money from one of their accounts, return an error if there are insufficient funds

# BankAccount should allow the user to view the total amount of money they have at the bank

# BankAccount should track how many accounts the bank currently has

# BankAccount should have a private attribute called interest rate that is only displayed when the user calls the method account_information

# BankAccount should have a method called account_information that displays the users account number, total money, checking account balance, saving account balance and interest rate

# A user should not be able to set any attributes from the BankAccount class

class BankAccount
  private
    @interest_rate

    def assign_acct_nbr
      return rand(999999999999) + 1
    end

  public
  @@acct_cnt = 0
  @c_bal = 0.0
  @s_bal = 0.0


  def self.get_acct_cnt
    return @@acct_cnt
  end

  def initialize (c_dep,s_dep )
    @interest_rate = 5.0
    @c_bal = c_dep
    @s_bal = s_dep
    @acct_nbr = assign_acct_nbr
    @@acct_cnt+=1
  end

  def get_tol_bal
      return @s_bal+@c_bal
  end

  def get_s_bal
    return @s_bal
  end

  def get_c_bal
    return @c_bal
  end

  def deposit (c_dep, s_dep)
    @c_bal += c_dep
    @s_bal += s_dep
    return self
  end

  def withdraw (c_with, s_with)
    if (@c_bal + @s_bal) < (c_with + s_with)
      return "you're hosed!"
    end
    @c_bal -= c_with
    @s_bal -= s_with
    return self
  end

  def account_information
    print "*****************************","\n"
    print 'account: ', @acct_nbr, "\n"
    print "rate: ", @interest_rate, "\n"
    print 'savings:  $', @s_bal, "\n"
    print 'checking:  $', @c_bal, " \n"
    print "*****************************","\n"

    return self
  end

end

acct1=BankAccount.new 1.0,1.0
acct1.account_information
acct1.deposit(10000,2000).account_information.withdraw(1000.0,1000.0).account_information
